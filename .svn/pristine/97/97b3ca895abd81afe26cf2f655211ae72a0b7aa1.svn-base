{"name": "test_add_task[2-args0]", "status": "broken", "statusDetails": {"message": "SystemExit", "trace": "self = <page.acbn_login.ACBNLogin object at 0x000002B6DE50E730>\nlocator = ('xpath', \"//p[@class='a-logo']\"), timeout = 20, interval = 1\n\n    def find(self, locator, timeout=20, interval=1):\n        \"\"\"\n        定位到元素，locator传入元组 (\"id\", \"value1\")\n        WebDriverWait:创建一个 WebDriverWait 对象，用于等待页面元素状态的改变。\n        .until:调用 WebDriverWait 对象的 until 方法，并传入一个期待条件（Expected Condition）以等待指定定位信息的页面元素出现。\n        其中期待条件是visibility_of_element_located：等待页面中至少一个元素匹配指定的定位信息，并且该元素可见\n        \"\"\"\n        max_retries = 10\n        retries = 0\n        while retries < max_retries:\n            try:\n                if not isinstance(locator, tuple):\n                    self.log.error('locator参数类型错误，必须传元祖类型：loc = (\"id\", \"value1\")')\n                else:\n                    self.log.debug(f\"正在定位元素信息：定位方式->  {locator[0]}, 元素值->  {locator[1]}\")\n>                   ele = WebDriverWait(self.driver, timeout, interval).until(EC.visibility_of_element_located(locator))\n\ncommon\\Base.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"815025eb6ec561a1ee9591fc235fc6bc\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000002B6D15B9940>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <undetected_chromedriver.Chrome (session=\"815025eb6ec561a1ee9591fc235fc6bc\")>\n\n    def _predicate(driver: WebDriverOrWebElement):\n        try:\n>           return _element_if_visible(driver.find_element(*locator))\n\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <undetected_chromedriver.Chrome (session=\"815025eb6ec561a1ee9591fc235fc6bc\")>\nby = 'xpath', value = \"//p[@class='a-logo']\"\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <undetected_chromedriver.Chrome (session=\"815025eb6ec561a1ee9591fc235fc6bc\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//p[@class='a-logo']\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B6DCD65580>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75BC7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x773FBD2B+107]\\\\n\\\\tRtlClearBits [0x773FBCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x01060ED3+27667]\nE       \t(No symbol) [0x00FF6BD4]\nE       \t(No symbol) [0x00EF1AFF]\nE       \t(No symbol) [0x00ECE483]\nE       \t(No symbol) [0x00F5A00F]\nE       \t(No symbol) [0x00F6C376]\nE       \t(No symbol) [0x00F536C6]\nE       \t(No symbol) [0x00F274D1]\nE       \t(No symbol) [0x00F2804D]\nE       \tGetHandleVerifier [0x01313D43+2857603]\nE       \tGetHandleVerifier [0x01367EAD+3202029]\nE       \tGetHandleVerifier [0x010E46D4+566292]\nE       \tGetHandleVerifier [0x010EB8CC+595468]\nE       \t(No symbol) [0x00FFF9C4]\nE       \t(No symbol) [0x00FFC6D8]\nE       \t(No symbol) [0x00FFC877]\nE       \t(No symbol) [0x00FEE76E]\nE       \tBaseThreadInitThunk [0x75BC7BA9+25]\nE       \tRtlInitializeExceptionChain [0x773FBD2B+107]\nE       \tRtlClearBits [0x773FBCAF+191]\n\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"class\", autouse=False)\n    def after_init():\n        \"\"\"ACBN登录模块，作用于class\"\"\"\n        GetLogger().debug(\"----------测试开始----------\")\n>       ACBNLogin(driver).acbn_login(\"admin\", \"admin\")\n\ntestcase_py\\conftest.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\acbn_login.py:41: in acbn_login\n    self.find((\"xpath\", \"//p[@class='a-logo']\"))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page.acbn_login.ACBNLogin object at 0x000002B6DE50E730>\nlocator = ('xpath', \"//p[@class='a-logo']\"), timeout = 20, interval = 1\n\n    def find(self, locator, timeout=20, interval=1):\n        \"\"\"\n        定位到元素，locator传入元组 (\"id\", \"value1\")\n        WebDriverWait:创建一个 WebDriverWait 对象，用于等待页面元素状态的改变。\n        .until:调用 WebDriverWait 对象的 until 方法，并传入一个期待条件（Expected Condition）以等待指定定位信息的页面元素出现。\n        其中期待条件是visibility_of_element_located：等待页面中至少一个元素匹配指定的定位信息，并且该元素可见\n        \"\"\"\n        max_retries = 10\n        retries = 0\n        while retries < max_retries:\n            try:\n                if not isinstance(locator, tuple):\n                    self.log.error('locator参数类型错误，必须传元祖类型：loc = (\"id\", \"value1\")')\n                else:\n                    self.log.debug(f\"正在定位元素信息：定位方式->  {locator[0]}, 元素值->  {locator[1]}\")\n                    ele = WebDriverWait(self.driver, timeout, interval).until(EC.visibility_of_element_located(locator))\n                    if ele:\n                        return ele      # 返回的是找到的页面元素对象\n                    else:\n                        self.log.error(f\"定位失败：定位方式->{locator[0]}, 元素值->{locator[1]}\")\n                        return None\n            except ElementClickInterceptedException:\n                retries += 1\n                self.log.error(\"find事件  -->  当前元素可能被遮挡或页面未完全加载\")\n                element = self.driver.find_element(locator)\n                webdriver.ActionChains(self.driver).move_to_element(element).click(element).perform()\n            except NoSuchElementException:\n                self.log.error(\"find事件  -->  找不到元素\")\n            except NoSuchWindowException:\n                self.log.error(\"find事件  -->  浏览器窗口已关闭\")    # 当尝试操作一个已经关闭的浏览器窗口或标签时触发该异常\n>               sys.exit()\nE               SystemExit\n\ncommon\\Base.py:112: SystemExit"}, "attachments": [{"name": "log", "source": "9d9711e7-4ad4-4ac6-a7ef-fee459930cfc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "idx", "value": "2"}, {"name": "args", "value": "{'start': 1, 'module': 'add_esxi', 'type': 1, 'task_name': None, 'device_name': '192.168.4.249', 'source': None, 'target': 'T:', 'assert': None, 'user': None, 'pass': None}"}], "start": 1718957952027, "stop": 1718957952027, "uuid": "673707ef-7c72-4473-a2d7-734bcacf746e", "historyId": "714a36483d4f5dca109c2b7d0466f82a", "testCaseId": "5d7989f8ae114ff8751aa8ccb058a44e", "fullName": "testcase_py.test_add_task.TestAddTask#test_add_task", "labels": [{"name": "parentSuite", "value": "testcase_py"}, {"name": "suite", "value": "test_add_task"}, {"name": "subSuite", "value": "TestAddTask"}, {"name": "host", "value": "DESKTOP-HNNG48V"}, {"name": "thread", "value": "7864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase_py.test_add_task"}]}