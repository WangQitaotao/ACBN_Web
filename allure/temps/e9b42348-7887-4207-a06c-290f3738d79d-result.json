{"name": "test_add_task[8-args6]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=126.0.6478.114)\nStacktrace:\n\tGetHandleVerifier [0x01060ED3+27667]\n\t(No symbol) [0x00FF6BD4]\n\t(No symbol) [0x00EF1AFF]\n\t(No symbol) [0x00ECE483]\n\t(No symbol) [0x00F5A00F]\n\t(No symbol) [0x00F6C376]\n\t(No symbol) [0x00F536C6]\n\t(No symbol) [0x00F274D1]\n\t(No symbol) [0x00F2804D]\n\tGetHandleVerifier [0x01313D43+2857603]\n\tGetHandleVerifier [0x01367EAD+3202029]\n\tGetHandleVerifier [0x010E46D4+566292]\n\tGetHandleVerifier [0x010EB8CC+595468]\n\t(No symbol) [0x00FFF9C4]\n\t(No symbol) [0x00FFC6D8]\n\t(No symbol) [0x00FFC877]\n\t(No symbol) [0x00FEE76E]\n\tBaseThreadInitThunk [0x75BC7BA9+25]\n\tRtlInitializeExceptionChain [0x773FBD2B+107]\n\tRtlClearBits [0x773FBCAF+191]", "trace": "@pytest.fixture(scope=\"class\", autouse=False)\n    def after_init():\n        \"\"\"ACBN登录模块，作用于class\"\"\"\n        GetLogger().debug(\"----------测试开始----------\")\n>       ACBNLogin(driver).acbn_login(\"admin\", \"admin\")\n\ntestcase_py\\conftest.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage\\acbn_login.py:38: in acbn_login\n    self.open_url()\ncommon\\Base.py:61: in open_url\n    self.driver.maximize_window()\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B6DCD65580>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...dInitThunk [0x75BC7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x773FBD2B+107]\\\\n\\\\tRtlClearBits [0x773FBCAF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=126.0.6478.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x01060ED3+27667]\nE       \t(No symbol) [0x00FF6BD4]\nE       \t(No symbol) [0x00EF1AFF]\nE       \t(No symbol) [0x00ECE483]\nE       \t(No symbol) [0x00F5A00F]\nE       \t(No symbol) [0x00F6C376]\nE       \t(No symbol) [0x00F536C6]\nE       \t(No symbol) [0x00F274D1]\nE       \t(No symbol) [0x00F2804D]\nE       \tGetHandleVerifier [0x01313D43+2857603]\nE       \tGetHandleVerifier [0x01367EAD+3202029]\nE       \tGetHandleVerifier [0x010E46D4+566292]\nE       \tGetHandleVerifier [0x010EB8CC+595468]\nE       \t(No symbol) [0x00FFF9C4]\nE       \t(No symbol) [0x00FFC6D8]\nE       \t(No symbol) [0x00FFC877]\nE       \t(No symbol) [0x00FEE76E]\nE       \tBaseThreadInitThunk [0x75BC7BA9+25]\nE       \tRtlInitializeExceptionChain [0x773FBD2B+107]\nE       \tRtlClearBits [0x773FBCAF+191]\n\nE:\\Install_Software\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "parameters": [{"name": "idx", "value": "8"}, {"name": "args", "value": "{'start': 0, 'module': 'add_file', 'type': 7, 'task_name': None, 'device_name': None, 'source': 'T:\\\\A数据恢复测试数据\\\\12种缩略图', 'target': 'T:', 'assert': None, 'user': None, 'pass': None}"}], "start": 1718957953959, "stop": 1718957953959, "uuid": "412d6a57-a687-4dae-a7d1-37122dddc629", "historyId": "c9781ec6c9f39ca7d567cc810daf21f2", "testCaseId": "5d7989f8ae114ff8751aa8ccb058a44e", "fullName": "testcase_py.test_add_task.TestAddTask#test_add_task", "labels": [{"name": "parentSuite", "value": "testcase_py"}, {"name": "suite", "value": "test_add_task"}, {"name": "subSuite", "value": "TestAddTask"}, {"name": "host", "value": "DESKTOP-HNNG48V"}, {"name": "thread", "value": "7864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase_py.test_add_task"}]}